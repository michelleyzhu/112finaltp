import cv2 as cv2
import numpy as np
from PIL import Image 

def testForColor(img):
    hmin = cv2.getTrackbarPos("min","trackbars")
    hmax = cv2.getTrackbarPos("max","trackbars")
    
    imgCanny = cv2.Canny(img,hmin,hmax)
    return imgCanny

def empty():
    pass

def createTrackbars():
    cv2.namedWindow("trackbars")
    cv2.createTrackbar("min","trackbars",0,255,empty)
    cv2.createTrackbar("max","trackbars",255,255,empty)
    

# gets 48 by 48 list
def getNpArray(str):
    final = []
    flat = str.split(" ")
    for lt in range(48):
        final += [flat[lt*48:(lt+1)*48]]
    return final

def face():
    vid = cv2.VideoCapture(0)
    faceCascade = cv2.CascadeClassifier("haarcascades/haarcascade_frontalface_default.xml")
    eyeCascade = cv2.CascadeClassifier("haarcascades/haarcascade_eye.xml")
    

    while(True):
        #ret, frame = vid.read()
        
        
        pixelListed = getNpArray("224 227 219 217 215 210 187 177 189 200 206 212 210 208 204 207 206 207 205 203 203 206 206 201 204 199 196 189 187 187 186 185 184 186 183 182 182 173 161 154 176 202 206 203 198 196 191 187 221 222 213 208 208 199 186 170 176 188 196 197 197 196 198 198 201 201 199 199 194 191 192 194 188 185 183 184 186 186 181 180 176 180 178 175 180 174 161 147 163 189 194 199 193 184 182 178 220 215 209 205 197 188 172 166 176 188 194 202 202 199 191 186 190 190 188 185 187 192 194 191 194 196 193 189 184 183 181 177 174 178 177 173 180 175 159 145 155 175 180 186 196 192 182 168 215 212 204 196 193 181 157 172 187 182 181 186 188 197 200 201 199 199 198 197 195 194 196 199 189 180 181 183 184 189 190 184 178 174 173 174 179 174 162 144 153 166 160 172 183 195 193 192 211 207 201 200 191 159 173 191 196 201 202 199 190 187 185 192 195 194 197 197 194 197 199 185 187 190 193 190 178 172 175 181 183 178 175 177 179 171 163 150 150 156 144 155 170 175 178 178 214 212 206 189 161 172 189 168 149 166 179 183 186 187 190 179 186 192 192 191 193 197 185 187 186 179 164 157 150 145 145 145 152 164 173 174 177 170 160 156 142 150 129 138 153 161 159 162 212 193 161 148 170 188 170 158 161 152 146 142 153 174 190 188 185 186 186 178 183 187 186 189 171 152 140 138 142 151 146 151 159 146 141 154 173 168 157 157 137 144 135 122 137 156 167 155 192 170 130 158 185 182 164 177 189 184 164 156 162 173 184 195 191 183 185 182 181 189 194 186 168 160 160 157 158 164 173 177 170 164 142 144 163 169 161 156 128 135 148 126 127 128 147 159 172 180 128 151 184 172 174 177 178 176 176 174 170 174 179 183 181 185 180 172 176 184 185 180 173 173 162 157 167 171 172 171 174 170 164 158 155 167 164 151 130 121 146 130 116 114 107 118 183 194 132 138 184 167 172 166 171 158 155 167 166 160 164 168 173 180 177 180 173 176 178 172 166 155 148 152 141 120 123 127 146 168 172 169 158 165 162 146 136 117 138 146 128 114 105 111 194 201 136 128 181 166 175 171 164 156 129 127 126 134 142 147 155 170 179 185 174 175 171 159 140 127 126 99 73 105 133 141 134 138 157 165 170 168 158 150 139 119 129 149 144 133 123 121 198 193 137 131 177 180 179 162 149 102 111 119 111 110 125 121 115 139 169 182 171 171 163 126 86 90 90 63 53 64 86 99 130 156 148 144 161 165 159 151 142 118 126 139 158 150 147 148 192 185 145 138 177 182 166 134 114 95 110 90 95 106 115 118 91 94 148 180 175 175 151 106 66 75 75 49 35 74 134 113 82 78 146 146 144 152 156 147 145 126 121 134 145 155 159 158 194 184 151 142 176 172 144 114 120 56 42 69 114 117 91 101 94 68 123 182 176 175 146 97 83 84 45 18 13 38 87 155 110 68 95 151 143 142 148 147 146 129 125 133 147 154 154 157 195 179 159 146 174 168 143 150 93 55 57 48 107 142 102 74 87 111 125 174 173 172 152 95 119 96 52 78 75 63 81 107 120 138 127 129 138 152 151 143 147 136 123 141 158 164 166 163 186 180 160 148 169 166 166 157 139 130 100 79 85 90 121 106 111 123 139 176 172 176 157 113 84 107 99 99 108 123 136 137 134 137 138 140 145 149 143 140 145 138 132 133 143 158 179 176 181 179 159 145 162 158 167 160 161 162 162 153 142 125 120 125 116 108 144 170 171 175 157 136 107 91 104 107 106 122 128 134 134 131 141 147 154 158 155 149 154 153 143 124 135 160 167 175 179 184 161 143 161 159 166 167 154 133 136 137 137 126 110 118 129 132 150 169 166 174 163 143 137 132 106 95 97 111 121 131 139 148 156 156 163 167 165 166 168 169 149 137 139 160 169 173 186 180 164 148 161 157 154 165 164 147 147 142 133 119 120 142 146 134 153 171 172 171 168 153 141 147 146 125 113 114 117 126 140 145 158 175 186 184 165 172 178 174 146 133 144 152 162 168 188 173 159 141 158 152 155 154 165 162 166 162 156 147 153 159 143 138 154 171 168 172 168 158 155 142 138 140 145 140 142 145 153 161 184 198 185 182 172 169 181 165 142 139 142 140 148 176 179 168 159 139 153 152 148 151 168 171 169 165 167 163 155 149 148 142 149 168 173 175 164 156 158 155 151 144 141 145 147 153 169 184 191 189 175 176 177 173 174 165 140 145 145 135 136 164 172 170 152 139 151 155 151 157 166 172 171 162 161 163 159 148 131 136 155 165 170 169 165 156 144 142 127 147 151 148 150 165 180 191 178 166 170 181 174 171 172 168 146 143 129 137 146 149 173 159 147 135 142 154 149 152 159 173 169 164 169 161 150 110 121 143 161 163 163 170 173 166 141 154 110 97 136 148 152 169 178 169 157 156 160 168 168 171 168 164 153 135 108 132 142 136 183 175 160 139 144 154 147 146 154 163 157 159 156 148 109 94 150 147 160 172 171 175 174 168 157 173 136 71 94 132 147 156 154 147 145 147 157 165 173 184 174 159 156 129 107 142 145 103 204 205 190 152 145 160 154 149 146 147 143 145 143 125 76 102 154 149 154 156 163 164 165 172 162 150 119 94 77 90 123 131 135 138 139 141 158 168 171 182 178 165 159 130 102 143 114 87 211 203 194 175 155 152 150 142 135 139 138 139 130 92 90 118 124 127 131 138 139 146 150 117 99 106 113 112 98 75 95 123 128 129 134 145 158 161 158 170 180 172 161 119 108 112 79 104 209 203 208 190 168 145 141 140 132 134 137 137 113 96 109 129 126 116 107 123 136 138 115 102 126 145 133 119 105 90 75 103 120 126 135 145 152 150 144 165 181 177 166 123 131 107 96 136 205 210 205 189 185 151 133 133 129 127 131 127 106 104 113 131 133 128 121 110 109 105 106 125 135 172 165 118 113 107 82 73 110 127 135 141 134 131 144 165 180 176 165 127 150 149 122 140 217 215 200 192 184 158 131 129 126 122 125 117 106 104 117 131 136 133 133 127 123 119 122 136 157 182 176 137 121 117 110 84 90 121 135 151 124 128 153 163 174 173 158 128 165 163 143 150 220 202 196 191 185 182 130 128 127 125 118 115 103 101 129 133 142 145 143 139 141 145 152 165 162 167 162 150 130 121 110 87 86 87 126 155 120 134 153 159 168 171 148 131 142 148 154 156 214 203 202 194 188 194 152 131 129 133 128 124 103 102 109 94 86 88 93 109 119 129 131 121 101 92 92 84 73 42 20 33 64 97 115 151 118 134 151 155 168 171 136 139 146 149 155 159 212 205 208 195 186 187 176 140 133 127 137 123 116 86 23 12 66 56 40 40 41 46 42 43 51 74 85 126 96 1 28 51 80 125 126 140 123 137 152 157 167 163 142 173 163 151 153 155 210 211 210 197 190 192 185 150 137 130 132 132 121 100 88 3 58 152 135 117 106 109 100 142 137 171 184 130 18 9 76 73 99 134 154 132 130 145 150 157 169 151 157 183 172 150 155 162 217 216 206 203 191 187 184 182 143 139 133 143 128 102 122 86 2 88 152 175 180 181 172 190 177 158 71 33 48 94 102 95 129 130 151 131 134 144 154 163 168 141 166 180 174 168 165 162 218 209 209 197 183 185 185 194 162 138 137 133 139 109 125 128 67 11 33 68 103 125 90 89 46 22 58 143 159 154 131 124 145 140 146 128 134 147 164 171 144 134 164 174 173 145 142 140 211 209 208 194 191 195 186 188 183 143 140 128 136 118 124 131 106 51 35 48 48 34 37 32 73 108 118 125 143 156 142 134 146 152 141 130 137 153 175 159 115 138 161 173 169 135 136 140 209 209 205 200 193 195 190 184 189 160 133 136 125 128 118 130 130 99 64 67 74 64 77 79 89 98 113 136 154 157 139 133 152 159 137 136 141 159 175 127 117 140 153 168 167 136 120 112 208 202 200 193 191 195 186 187 184 176 139 133 127 122 124 132 130 126 117 86 69 71 78 92 106 129 137 141 153 150 126 135 161 161 136 145 151 163 155 119 125 138 149 168 174 120 104 92 236 228 214 196 192 187 175 179 165 173 157 129 134 120 128 133 131 128 125 120 121 128 123 129 133 133 139 154 155 139 130 151 170 156 137 150 156 169 162 111 120 131 142 170 179 106 81 72 243 245 244 240 228 210 199 192 181 179 163 128 131 126 129 136 134 128 129 122 123 124 127 129 130 133 136 144 149 143 144 160 165 146 141 148 147 185 165 96 113 130 147 180 167 78 61 65 231 229 223 213 204 202 205 207 205 192 157 137 124 122 129 137 138 129 130 132 128 125 125 131 135 136 141 150 149 149 148 155 154 139 144 144 155 191 152 93 118 135 157 187 154 70 62 68 175 172 162 147 136 128 126 128 122 122 147 147 138 119 120 132 136 133 127 129 132 132 134 136 144 151 153 159 162 149 144 154 142 135 141 147 163 181 157 95 119 139 156 182 150 127 118 80 150 143 131 118 110 105 100 99 93 102 148 152 151 138 118 121 130 135 125 130 135 140 140 145 146 145 149 148 151 151 151 154 135 140 149 150 157 170 189 122 116 136 146 185 104 56 130 152 132 128 122 117 111 110 104 99 92 102 149 152 153 150 137 118 119 130 132 129 141 141 138 145 147 140 140 139 142 148 156 144 141 142 140 139 153 180 211 169 121 140 152 186 91 41 87 157 114 120 122 117 112 109 105 96 82 95 152 151 154 153 151 137 117 122 129 125 127 128 128 130 130 129 129 130 137 145 145 139 130 121 125 146 175 193 207 173 128 147 163 192 82 29 87 170 96 110 118 114 108 102 101 97 83 139 158 152 155 156 154 151 134 116 122 122 122 123 120 118 119 117 120 125 135 142 126 117 115 130 163 187 189 192 202 172 131 154 170 196 84 18 60 144 86 103 113 108 102 99 99 85 116 192 158 154 156 158 158 156 151 133 119 120 121 121 119 113 118 118 118 129 137 129 126 139 160 172 187 189 183 197 211 192 147 147 167 200 102 24 40 128 83 94 104 103 100 97 94 81 158 193 152 154 158 158 159 158 156 149 133 122 118 116 118 111 115 118 122 131 136 144 162 174 176 181 179 171 175 201 210 205 175 150 170 205 118 17 75 166")
        frame = np.array(pixelListed,np.uint8())
        faces = faceCascade.detectMultiScale(frame,1.3,5)
        
        print(len(faces))
        for (x,y,w,h) in faces:
            cv2.rectangle(frame,(x,y),(x+w,y+h),(255,0,0),3)
            faceRange = frame[y:y+h, x:x+w]
            eyes = eyeCascade.detectMultiScale(faceRange,1.3,5)
            for (ex,ey,ew,eh) in eyes:
                cv2.rectangle(frame,(x+ex,y+ey),(x+ex+ew,y+ey+eh),(255,0,0),5)
        
        w, h = frame.shape[1],frame.shape[0]
        frame = cv2.resize(frame,(w,h))
        cv2.imshow("classified",frame)


        if(cv2.waitKey(1) & 0xFF == ord('q')):
            break

def exp1():
    vid = cv2.VideoCapture(0)
    createTrackbars()
    kernelVal = 0
    while(True):
        ret, frame = vid.read()
        w, h = frame.shape[1]//3,frame.shape[0]//3
        imgBlur = cv2.GaussianBlur(frame,(45,45),1)
        #imgBlur2 = cv2.GaussianBlur(frame,(45,45),5)
        imgColor = frame.copy()
        
        size = (imgColor.shape[1]//2, imgColor.shape[0]//2)

        pyrLevels = 3
        down = cv2.pyrDown(imgColor)
        up = cv2.pyrUp(down,dstsize=size)

        for i in range(pyrLevels):
            imgColor = cv2.pyrDown(imgColor)
        #for i in range(biPasses):   
        #    imgColor = cv2.bilateralFilter(imgColor,d=5,sigmaColor=9,sigmaSpace=9)
        for i in range(pyrLevels):
            imgColor = cv2.pyrUp(imgColor)
        #imgColor = cv2.pyrUp(imgColor,dstsize=size)

        cv2.imshow("laplace",up)
        '''down = cv2.pyrDown(cv2.pyrDown(cv2.pyrDown(pyr)))
        up = cv2.pyrUp(cv2.pyrUp(cv2.pyrUp(down)))
        laplace = cv2.subtract(up,pyr)

        cannyNorm = cv2.resize(cv2.Canny(imgBlur,200,200),(w,h))
        cannyLP = cv2.resize(cv2.Canny(laplace,200,200),(w,h))
        
        
        cv2.imshow("laplace",cannyLP)
        cv2.imshow("norm",cannyNorm)

        
        gaussians = [pyr]
        
        for i in range(6):
            pyr = cv2.pyrDown(pyr)
            gaussians.append(pyr)
        
        laplace = gaussians[5]
        temp = [pyr]
        for i in range(5,0,-1):
            temp = cv2.pyrUp(gaussians[i])
            #print(len(gaussians[i-1]), len(temp))
            #laplace = cv2.subtract(gaussians[i-1],temp)
        '''
        #cv2.imshow("laplace",laplace)
        #cv2.imshow("orig",frame)
        #stacked = np.hstack([resizeUp,resizeDown])

        #imgCol = frame.copy()
        #imgCol = np.vstack([imgCol[kernelVal:][:][:],imgCol[:kernelVal][:][:]])
        #imgColSized = cv2.resize(imgCol,(frame.shape[1]//3,frame.shape[0]//3))

        
        if(cv2.waitKey(1) == ord('u')):
            kernelVal += 10
        if(cv2.waitKey(1) == ord('d')):
            kernelVal -= 10
        
        #imgCanny = testForColor(frame)
        #imgCannySize = cv2.resize(imgCanny,(w,h))
        #cv2.putText(imgBlur, f"{kernelVal}",(50,50),cv2.FONT_HERSHEY_COMPLEX,1,(255,0,0))
        #sized = cv2.resize(imgBlur,(frame.shape[1]//3,frame.shape[0]//3))

        #cv2.imshow("up",img)
        #cv2.imshow("down",imgPyrDown)

        if(cv2.waitKey(1) and 0xFF == ord('q')):
            break
def cartoon():
    vid = cv2.VideoCapture(0)
    
    while(True):
        ret, frame = vid.read()
        imgCartoon = frame
        imgColor = imgCartoon.copy()
        
        pyrLevels = 3
        biPasses = 7
        for i in range(pyrLevels):
            imgColor = cv2.pyrDown(imgColor)
        
        for i in range(biPasses):   
            imgColor = cv2.bilateralFilter(imgColor,d=7,sigmaColor=9,sigmaSpace=9)
        

        for i in range(pyrLevels):
            imgColor = cv2.pyrUp(imgColor)
        
        imgEdge = cv2.cvtColor(imgCartoon,cv2.COLOR_BGR2GRAY)
        imgEdge = cv2.medianBlur(imgEdge,7)
        imgEdge = cv2.adaptiveThreshold(imgEdge,255,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,blockSize=9,C=2.5)
        imgEdge = cv2.erode(imgEdge,(5,5),iterations=3)
        imgCartoon1 = cv2.bitwise_and(imgColor,imgColor,mask=imgEdge)
        imgCartoon1 = cv2.resize(imgCartoon1,(frame.shape[1]//2,frame.shape[0]//2))
        
        cv2.imshow("multiple passes",imgCartoon1)

        if(cv2.waitKey(1) and 0xFF == ord('q')):
            break

def wtf():
    img = cv2.imread("graphics/im1.0.jpg")
    hsv = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    for row in hsv:
        h = max([row[i][0] for i in range(len(row[0]))])
        s = max([row[i][1] for i in range(len(row[0]))])
        v = max([row[i][2] for i in range(len(row[0]))])
        print(f"h:{h}, s:{s}, v:{v}")
    print(hsv)

def check():
    img = cv2.imread("graphics/im1.0.jpg")
    print(len(img),len(img[0]),len(img[0][0]))
check()